{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Component, ChangeDetectionStrategy, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst _c0 = function (a0, a1, a2, a3) {\n  return {\n    circle: a0,\n    progress: a1,\n    \"progress-dark\": a2,\n    pulse: a3\n  };\n};\n\nfunction NgxSkeletonLoaderComponent_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction4(4, _c0, ctx_r0.appearance === \"circle\", ctx_r0.animation === \"progress\", ctx_r0.animation === \"progress-dark\", ctx_r0.animation === \"pulse\"))(\"ngStyle\", ctx_r0.theme);\n    i0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel)(\"aria-valuetext\", ctx_r0.loadingText);\n  }\n}\n\nconst NGX_SKELETON_LOADER_CONFIG = new InjectionToken('ngx-skeleton-loader.config');\n\nclass NgxSkeletonLoaderComponent {\n  constructor(config) {\n    const {\n      appearance = 'line',\n      animation = 'progress',\n      theme = null,\n      loadingText = 'Loading...',\n      count = 1,\n      ariaLabel = 'loading'\n    } = config || {};\n    this.appearance = appearance;\n    this.animation = animation;\n    this.theme = theme;\n    this.loadingText = loadingText;\n    this.count = count;\n    this.items = [];\n    this.ariaLabel = ariaLabel;\n  }\n\n  ngOnInit() {\n    start('NgxSkeletonLoader:Rendered');\n    start('NgxSkeletonLoader:Loaded');\n    this.validateInputValues();\n  }\n\n  validateInputValues() {\n    // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n    if (!/^\\d+$/.test(`${this.count}`)) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`);\n      }\n\n      this.count = 1;\n    }\n\n    this.items.length = this.count;\n    const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n\n    if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to \"progress\".`);\n      }\n\n      this.animation = 'progress';\n    }\n\n    if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n      // Shows error message only in Development\n      if (isDevMode()) {\n        console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`);\n      }\n\n      this.appearance = '';\n    }\n  }\n\n  ngOnChanges(changes) {\n    // Avoiding multiple calls for the same input in case there's no changes in the fields\n    // Checking if the fields that require validation are available and if they were changed\n    // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n    if (['count', 'animation', 'appearance'].find(key => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {\n      return;\n    }\n\n    this.validateInputValues();\n  }\n\n  ngAfterViewInit() {\n    end('NgxSkeletonLoader:Rendered');\n  }\n\n  ngOnDestroy() {\n    end('NgxSkeletonLoader:Loaded');\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxSkeletonLoaderComponent.ɵfac = function NgxSkeletonLoaderComponent_Factory(t) {\n  return new (t || NgxSkeletonLoaderComponent)(i0.ɵɵdirectiveInject(NGX_SKELETON_LOADER_CONFIG, 8));\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxSkeletonLoaderComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: NgxSkeletonLoaderComponent,\n  selectors: [[\"ngx-skeleton-loader\"]],\n  inputs: {\n    count: \"count\",\n    loadingText: \"loadingText\",\n    appearance: \"appearance\",\n    animation: \"animation\",\n    ariaLabel: \"ariaLabel\",\n    theme: \"theme\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 1,\n  vars: 1,\n  consts: [[\"class\", \"skeleton-loader\", \"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"0\", 3, \"ngClass\", \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"aria-busy\", \"true\", \"aria-valuemin\", \"0\", \"aria-valuemax\", \"100\", \"role\", \"progressbar\", \"tabindex\", \"0\", 1, \"skeleton-loader\", 3, \"ngClass\", \"ngStyle\"]],\n  template: function NgxSkeletonLoaderComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, NgxSkeletonLoaderComponent_span_0_Template, 1, 9, \"span\", 0);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngForOf\", ctx.items);\n    }\n  },\n  directives: [i1.NgForOf, i1.NgClass, i1.NgStyle],\n  styles: [\".skeleton-loader[_ngcontent-%COMP%]{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader[_ngcontent-%COMP%]:after, .skeleton-loader[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.circle[_ngcontent-%COMP%]{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%]{transform:translate(0)}.skeleton-loader.progress[_ngcontent-%COMP%]:after, .skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:after, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{box-sizing:border-box}.skeleton-loader.progress[_ngcontent-%COMP%]:before, .skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark[_ngcontent-%COMP%]:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse[_ngcontent-%COMP%]{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%], .skeleton-loader.progress[_ngcontent-%COMP%]{-webkit-animation:none;animation:none}.skeleton-loader.progress[_ngcontent-%COMP%], .skeleton-loader.progress-dark[_ngcontent-%COMP%]{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\"],\n  changeDetection: 0\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSkeletonLoaderComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-skeleton-loader',\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      template: \"<span\\n  *ngFor=\\\"let item of items\\\"\\n  class=\\\"skeleton-loader\\\"\\n  [attr.aria-label]=\\\"ariaLabel\\\"\\n  aria-busy=\\\"true\\\"\\n  aria-valuemin=\\\"0\\\"\\n  aria-valuemax=\\\"100\\\"\\n  [attr.aria-valuetext]=\\\"loadingText\\\"\\n  role=\\\"progressbar\\\"\\n  tabindex=\\\"0\\\"\\n  [ngClass]=\\\"{\\n    circle: appearance === 'circle',\\n    progress: animation === 'progress',\\n    'progress-dark': animation === 'progress-dark',\\n    pulse: animation === 'pulse'\\n  }\\\"\\n  [ngStyle]=\\\"theme\\\"\\n>\\n</span>\\n\",\n      styles: [\".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translate(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.progress{-webkit-animation:none;animation:none}.skeleton-loader.progress,.skeleton-loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\\n\"]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [NGX_SKELETON_LOADER_CONFIG]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    count: [{\n      type: Input\n    }],\n    loadingText: [{\n      type: Input\n    }],\n    appearance: [{\n      type: Input\n    }],\n    animation: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    theme: [{\n      type: Input\n    }]\n  });\n})();\n\nclass NgxSkeletonLoaderModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxSkeletonLoaderModule,\n      providers: [{\n        provide: NGX_SKELETON_LOADER_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n\n}\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxSkeletonLoaderModule.ɵfac = function NgxSkeletonLoaderModule_Factory(t) {\n  return new (t || NgxSkeletonLoaderModule)();\n};\n/** @nocollapse */\n\n/** @nocollapse */\n\n\nNgxSkeletonLoaderModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxSkeletonLoaderModule\n});\n/** @nocollapse */\n\n/** @nocollapse */\n\nNgxSkeletonLoaderModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxSkeletonLoaderModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxSkeletonLoaderComponent],\n      imports: [CommonModule],\n      exports: [NgxSkeletonLoaderComponent]\n    }]\n  }], null, null);\n})();\n/*\n * Public API Surface of ngx-skeleton-loader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { NGX_SKELETON_LOADER_CONFIG, NgxSkeletonLoaderComponent, NgxSkeletonLoaderModule };","map":{"version":3,"sources":["C:/projeto-movie/movieMap/node_modules/ngx-skeleton-loader/fesm2015/ngx-skeleton-loader.mjs"],"names":["i0","InjectionToken","isDevMode","Component","ChangeDetectionStrategy","Inject","Optional","Input","NgModule","start","end","i1","CommonModule","NGX_SKELETON_LOADER_CONFIG","NgxSkeletonLoaderComponent","constructor","config","appearance","animation","theme","loadingText","count","ariaLabel","items","ngOnInit","validateInputValues","test","console","error","length","allowedAnimations","indexOf","String","join","ngOnChanges","changes","find","key","isFirstChange","previousValue","currentValue","ngAfterViewInit","ngOnDestroy","ɵfac","ɵcmp","NgForOf","NgClass","NgStyle","type","args","selector","changeDetection","OnPush","template","styles","undefined","decorators","NgxSkeletonLoaderModule","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","declarations","imports","exports"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Component, ChangeDetectionStrategy, Inject, Optional, Input, NgModule } from '@angular/core';\nimport { start, end } from 'perf-marks/marks';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst NGX_SKELETON_LOADER_CONFIG = new InjectionToken('ngx-skeleton-loader.config');\n\nclass NgxSkeletonLoaderComponent {\n    constructor(config) {\n        const { appearance = 'line', animation = 'progress', theme = null, loadingText = 'Loading...', count = 1, ariaLabel = 'loading', } = config || {};\n        this.appearance = appearance;\n        this.animation = animation;\n        this.theme = theme;\n        this.loadingText = loadingText;\n        this.count = count;\n        this.items = [];\n        this.ariaLabel = ariaLabel;\n    }\n    ngOnInit() {\n        start('NgxSkeletonLoader:Rendered');\n        start('NgxSkeletonLoader:Loaded');\n        this.validateInputValues();\n    }\n    validateInputValues() {\n        // Checking if it's receiving a numeric value (string having ONLY numbers or if it's a number)\n        if (!/^\\d+$/.test(`${this.count}`)) {\n            // Shows error message only in Development\n            if (isDevMode()) {\n                console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'count' a numeric value. Forcing default to \"1\".`);\n            }\n            this.count = 1;\n        }\n        this.items.length = this.count;\n        const allowedAnimations = ['progress', 'progress-dark', 'pulse', 'false'];\n        if (allowedAnimations.indexOf(String(this.animation)) === -1) {\n            // Shows error message only in Development\n            if (isDevMode()) {\n                console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'animation' as: ${allowedAnimations.join(', ')}. Forcing default to \"progress\".`);\n            }\n            this.animation = 'progress';\n        }\n        if (['circle', 'line', ''].indexOf(String(this.appearance)) === -1) {\n            // Shows error message only in Development\n            if (isDevMode()) {\n                console.error(`\\`NgxSkeletonLoaderComponent\\` need to receive 'appearance' as: circle or line or empty string. Forcing default to \"''\".`);\n            }\n            this.appearance = '';\n        }\n    }\n    ngOnChanges(changes) {\n        // Avoiding multiple calls for the same input in case there's no changes in the fields\n        // Checking if the fields that require validation are available and if they were changed\n        // In case were not changed, we stop the function. Otherwise, `validateInputValues` will be called.\n        if (['count', 'animation', 'appearance'].find(key => changes[key] && (changes[key].isFirstChange() || changes[key].previousValue === changes[key].currentValue))) {\n            return;\n        }\n        this.validateInputValues();\n    }\n    ngAfterViewInit() {\n        end('NgxSkeletonLoader:Rendered');\n    }\n    ngOnDestroy() {\n        end('NgxSkeletonLoader:Loaded');\n    }\n}\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderComponent, deps: [{ token: NGX_SKELETON_LOADER_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Component });\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: NgxSkeletonLoaderComponent, selector: \"ngx-skeleton-loader\", inputs: { count: \"count\", loadingText: \"loadingText\", appearance: \"appearance\", animation: \"animation\", ariaLabel: \"ariaLabel\", theme: \"theme\" }, usesOnChanges: true, ngImport: i0, template: \"<span\\n  *ngFor=\\\"let item of items\\\"\\n  class=\\\"skeleton-loader\\\"\\n  [attr.aria-label]=\\\"ariaLabel\\\"\\n  aria-busy=\\\"true\\\"\\n  aria-valuemin=\\\"0\\\"\\n  aria-valuemax=\\\"100\\\"\\n  [attr.aria-valuetext]=\\\"loadingText\\\"\\n  role=\\\"progressbar\\\"\\n  tabindex=\\\"0\\\"\\n  [ngClass]=\\\"{\\n    circle: appearance === 'circle',\\n    progress: animation === 'progress',\\n    'progress-dark': animation === 'progress-dark',\\n    pulse: animation === 'pulse'\\n  }\\\"\\n  [ngStyle]=\\\"theme\\\"\\n>\\n</span>\\n\", styles: [\".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translate(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.progress{-webkit-animation:none;animation:none}.skeleton-loader.progress,.skeleton-loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\\n\"], directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-skeleton-loader', changeDetection: ChangeDetectionStrategy.OnPush, template: \"<span\\n  *ngFor=\\\"let item of items\\\"\\n  class=\\\"skeleton-loader\\\"\\n  [attr.aria-label]=\\\"ariaLabel\\\"\\n  aria-busy=\\\"true\\\"\\n  aria-valuemin=\\\"0\\\"\\n  aria-valuemax=\\\"100\\\"\\n  [attr.aria-valuetext]=\\\"loadingText\\\"\\n  role=\\\"progressbar\\\"\\n  tabindex=\\\"0\\\"\\n  [ngClass]=\\\"{\\n    circle: appearance === 'circle',\\n    progress: animation === 'progress',\\n    'progress-dark': animation === 'progress-dark',\\n    pulse: animation === 'pulse'\\n  }\\\"\\n  [ngStyle]=\\\"theme\\\"\\n>\\n</span>\\n\", styles: [\".skeleton-loader{box-sizing:border-box;overflow:hidden;position:relative;background:#eff1f6 no-repeat;border-radius:4px;width:100%;height:20px;display:inline-block;margin-bottom:10px;will-change:transform}.skeleton-loader:after,.skeleton-loader:before{box-sizing:border-box}.skeleton-loader.circle{width:40px;height:40px;margin:5px;border-radius:50%}.skeleton-loader.progress,.skeleton-loader.progress-dark{transform:translate(0)}.skeleton-loader.progress:after,.skeleton-loader.progress:before,.skeleton-loader.progress-dark:after,.skeleton-loader.progress-dark:before{box-sizing:border-box}.skeleton-loader.progress:before,.skeleton-loader.progress-dark:before{-webkit-animation:progress 2s ease-in-out infinite;animation:progress 2s ease-in-out infinite;background-size:200px 100%;position:absolute;z-index:1;top:0;left:0;width:200px;height:100%;content:\\\"\\\"}.skeleton-loader.progress:before{background-image:linear-gradient(90deg,rgba(255,255,255,0),rgba(255,255,255,.6),rgba(255,255,255,0))}.skeleton-loader.progress-dark:before{background-image:linear-gradient(90deg,transparent,rgba(0,0,0,.2),transparent)}.skeleton-loader.pulse{-webkit-animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;animation:pulse 1.5s cubic-bezier(.4,0,.2,1) infinite;-webkit-animation-delay:.5s;animation-delay:.5s}@media (prefers-reduced-motion: reduce){.skeleton-loader.pulse,.skeleton-loader.progress-dark,.skeleton-loader.progress{-webkit-animation:none;animation:none}.skeleton-loader.progress,.skeleton-loader.progress-dark{background-image:none}}@-webkit-keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@keyframes progress{0%{transform:translate(-200px)}to{transform:translate(calc(200px + 100vw))}}@-webkit-keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}@keyframes pulse{0%{opacity:1}50%{opacity:.4}to{opacity:1}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [NGX_SKELETON_LOADER_CONFIG]\n                    }, {\n                        type: Optional\n                    }] }];\n    }, propDecorators: { count: [{\n                type: Input\n            }], loadingText: [{\n                type: Input\n            }], appearance: [{\n                type: Input\n            }], animation: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], theme: [{\n                type: Input\n            }] } });\n\nclass NgxSkeletonLoaderModule {\n    static forRoot(config) {\n        return {\n            ngModule: NgxSkeletonLoaderModule,\n            providers: [{ provide: NGX_SKELETON_LOADER_CONFIG, useValue: config }],\n        };\n    }\n}\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, declarations: [NgxSkeletonLoaderComponent], imports: [CommonModule], exports: [NgxSkeletonLoaderComponent] });\n/** @nocollapse */ /** @nocollapse */ NgxSkeletonLoaderModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxSkeletonLoaderModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgxSkeletonLoaderComponent],\n                    imports: [CommonModule],\n                    exports: [NgxSkeletonLoaderComponent],\n                }]\n        }] });\n\n/*\n * Public API Surface of ngx-skeleton-loader\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGX_SKELETON_LOADER_CONFIG, NgxSkeletonLoaderComponent, NgxSkeletonLoaderModule };\n"]},"metadata":{},"sourceType":"module"}